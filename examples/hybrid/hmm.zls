open Probzelus
open Infer_pf
open Distribution
open Zelus_io

let hybrid horizon h = up t where
    rec der t = 1.0 init -.h reset up t -> -.h
(* 
let hybrid hmm (prob, obs) = p where
  rec init p = 0.
  and present obs(_) -> 
    do p = sample' (prob, gaussian(last p, 10.0)) done *)

let hybrid hmm (prob, obs) = p where
    rec z = horizon h
    and h = present (init) | z -> sample' (prob, exponential 1.0) init 0.
    and v = present z -> sample' (prob, gaussian(last v, 0.1)) init 0.0
    and der p = v init 0.
    and present obs(x) -> do () = observe' (prob, (gaussian (p, 0.1), x)) done

let hybrid hmm_time(prob, obs) = p where
    rec init sqrt_lambda = sample' (prob, gaussian (0., 1000.))
    and lambda = sqrt_lambda ** 2.
    and z = horizon h
    and h = present (init) | z -> sample' (prob, exponential lambda) init 0.
    and v = present z -> sample' (prob, gaussian(last v, 0.1)) init 0.
    and der p = v init 0.
    and present obs(x) -> 
      do () = observe' (prob, (gaussian (p, 0.1), x)) done

let hybrid main () = () where
  rec present (horizon 0.01) -> 
    do emit obs = last p_obs
    and () = 
      Format.printf "obs = %f mean = %f@."
        <| last p_obs <| mean_float (last d)
    done
  and d = hybrid_infer_subresample 1000 hmm (obs, obs)
  and p_obs, _ = hybrid_gen hmm obs 
  and init p_obs = 0.

(* let hybrid main () = () where
  rec present (init) | (horizon 1.) -> 
    local m, d in
    do m = 0 fby m + 1
    and emit obs = float m
    (* and m = mean_float (last d) *)
    and () = 
      print_float t; 
      print_string " obs = "; print_int m; print_newline ();
      print_string ": mean = "; print_float_t (last d);
      print_newline ()
    and d = infer 10 hmm obs done
  and der t = 1.0 init 0. *)
