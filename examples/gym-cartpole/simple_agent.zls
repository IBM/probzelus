(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Probzelus
open Cart_pole
open Pendulum
open Gym

(** Probabilistic model training one neuron **)

type net = { k1: float; k2: float; k3: float; k4: float}

let node controller (net, obs) = action where
  rec force = net.k1 *. obs.cart_position
      +. net.k2 *. obs.cart_velocity
      +. net.k3 *. obs.pole_angle
      +. net.k4 *. obs.pole_velocity
  and  action = if force > 0. then Right else Left


let proba model (obs_init) = net where
  rec init net = {
    k1 = Infer_pf.sample(Distribution.gaussian (0., 1.));
    k2 = Infer_pf.sample(Distribution.gaussian (0., 1.));
    k3 = Infer_pf.sample(Distribution.gaussian (0., 1.));
    k4 = Infer_pf.sample(Distribution.gaussian (0., 1.));
  }
  and obs = simple_pendulum (obs_init, (Right fby action))
  and action = controller (net, obs)
  and () = Infer_pf.factor(-10. *. abs_float (obs.pole_angle))


(** Infer the neuron using the Zelus model and simulate with the openai gym**)

let node main () = () where
  rec net_dist = Infer_pf.infer 3000 model obs
  and net = Distribution.draw net_dist
  and obs, _, _ = cart_pole_gym true (Right fby action)
  and action = controller (net, obs)
