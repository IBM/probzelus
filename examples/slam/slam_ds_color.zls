(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Probzelus
open Zelus_owl
open Infer_ds_streaming


type direction = Left | Right

let sensor_noise = 0.1
let wheel_noise = 0.1
let max_pos = Array_misc.max_pos

let proba move (x_init, cmd) = x where
  rec init x = x_init
  and match cmd with
      | Right ->
          do x = min max_pos (if eval wheel_slip then last x else last x + 1) done
      | Left ->
          do x = max 0 (if eval wheel_slip then last x else last x - 1) done
      end
  and wheel_slip = sample (bernoulli (const wheel_noise))

let proba gaussian_priors i = sample (mv_gaussian (const Array_misc.mu_prior, Array_misc.sigma_prior))

let proba slam (obs, cmd) = pair (array map, const x) where
  rec init map = Array_misc.ini (max_pos + 1) gaussian_priors ()
  and x = move (0, cmd)
  and o = Array_misc.get map x
  and () = observe (mv_gaussian (o, Array_misc.sigma_obs), obs)

let node slam_ctrl (event, pos_dist) = dir where
  rec x = Distribution.draw pos_dist
  and match event with
      | 1 -> do dir = Right done
      | -1 -> do dir = Left done
      | _ -> do automaton
        | Incr ->
            do dir = Right
            unless (x = max_pos) then Decr
        | Decr ->
            do dir = Left
            unless (x = 0) then Incr
        end done
      end

let node slam_obs real_map dir = (obs, x) where
  rec init x = 0
  and match dir with
      | Right ->
          do x = min max_pos (if wheel_slip then last x else last x + 1) done
      | Left ->
          do x = max 0 (if wheel_slip then last x else last x - 1) done
      end
  and wheel_slip = Distribution.draw (Distribution.bernoulli wheel_noise)
  and b = Array_misc.get real_map x
  and obs = Distribution.draw (Distribution.mv_gaussian (b, Array_misc.sigma_obs))

let random_init = Random.self_init ()

let node gaussian_priors_sample i =
    Distribution.draw (Distribution.mv_gaussian (Array_misc.mu_prior, Array_misc.sigma_prior))

let real_map = Array_misc.real_map 
let node main_ds_color () =
  let rec map_dist, pos_dist = Distribution.split (infer 600 slam (obs, dir))
  and dir = Right -> (slam_ctrl (event, Distribution.uniform_int(0, max_pos) fby pos_dist))
  and (obs, real_x) = slam_obs real_map dir
  and event = Array_misc.input ()
  in
  let rec t = 1. fby (t +. 1.) in
  let map_d = Distribution.split_array map_dist in
  let error = Array_misc.error_color (real_map , real_x) map_d pos_dist in
  let rec total_error = error -> (pre total_error) +. error in
  let mse = total_error /. t in
  print_float t; print_string ": "; print_float mse; print_newline();
  Array_misc.output_ds_color real_map real_x obs map_dist pos_dist
