(*
 * Copyright 2018-2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

open Probzelus
open Infer_pf
open Distribution
open Walker_misc

(* generateWalker :: Int -> RVar [(Double, (Double, Double))] *)
let node generate_walker n = (dt, mpos) where
  rec init w = real_walker_init ()
  and w = real_motion (dt, last w)
  and mpos = walker_gen_measurement w
  and dt = 10.

(* walkerSimulate :: [(Double, (Double, Double))] -> PProg Walker Walker *)
let proba walker_simulate measurements = (w.motion_type, w.position) where
  rec w = walker_init () fby walker_step (dt, meas_pos, w)
  and (dt, meas_pos) = measurements

(* main :: IO () *)
let node main () =
  let measurements = generate_walker () in
  print (infer 3 walker_simulate measurements)
