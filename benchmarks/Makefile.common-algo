.PHONY: build bench_per_particles bench_per_steps bench_mem_ideal bench publish

build: $(NAME).ml
	dune build run.exe

exec: build
	dune exec ./run.exe -- -result < ../data

bench_find_mse:
	- $(MSE_SEARCH_EXE) -mse-target $(MSE_TARGET) accuracy.csv

bench_per_particles:
	time $(BENCH_EXE) -cmd $(RUN) -input ../data -exp \
			-num-runs $(NUMRUNS) \
			-min-particles $(MIN) \
			-max-particles $(MAX) \
			-w $(WARMUP) \
			-incr $(INCR) \
			-per_particles per_particles.csv

bench_per_steps:
	time $(BENCH_EXE) -cmd $(RUN) -input ../data \
			-num-runs $(NUMRUNS) \
			-particles $(P) \
			-w $(WARMUP) \
			-per_step per_step.csv

bench_mem_ideal:
	time $(BENCH_EXE) -cmd $(RUN) -input ../data \
			-num-runs 10 \
			-particles $(P) \
			-per_step_mem per_step_mem.csv

analyze:
	time $(ANALYZE_EXE) \
			-per_particles per_particles.csv \
			-per_step per_step.csv \
			-per_step_mem per_step_mem.csv \
			-acc accuracy.csv \
			-perf perf.csv \
			-perf-step perf-step.csv \
			-mem-ideal-step mem-ideal.csv

publish:
	- mkdir -p $(PPL-ZELUS)/oopsla22/eval_figures/data/$(EX)/$(ALGO)
	- cp $(CSV_FILES) $(PPL-ZELUS)/oopsla22/eval_figures/data/$(EX)/$(ALGO)


$(NAME).ml : $(NAME).zls
	$(PROBZELUC) -noreduce $(NAME).zls

%.zci: %.zli
	$(PROBZELUC) $<

clean:
	-rm -f *.zc*
	-rm -f $(NAME).ml

cleanall: clean
	dune clean
	-rm -f *~
